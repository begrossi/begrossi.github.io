[{"categories":["crypto"],"content":"Cripto e eu: os desafios de alguém que não acredita em milagres A tecnologia da Blockchain vem mudando o mundo. Se você ainda não percebeu isso, em breve perceberá. A blockchain é a tecnologia base das criptomoedas, sendo o Bitcoin a maior e mais conhecida delas. Porém, blockchain tem milhares de outras utilidades, que pretendo falar em outros artigos. Mas aqui quero relatar um pouco sobre a minha relação com as cryptos. Ouvi falar de Bitcoin pela primeira vez por volta de 2012, através de meus irmãos, sempre antenados nas novidades tecnológicas, como eu. Sempre adorei criptografia e suas aplicações - já dei aula de graduação numa faculdade em BH sobre o assunto durante logo após meu mestrado -, usava muito o famoso software PGP para armazenar minhas informações mais importantes (ainda tenho uma chave dessa época em algum disquete ou pendrive), e trocava e-mails assinados por ele. Criptografia é a base da blockchain e criptomoedas - como o nome sugere. Bitcoin me pareceu então uma boa aplicação do uso de criptografia para resolver um problema real (um dinheiro livre, sem um banco central). Na época, enquanto empreendia, não tive tempo de me aprofundar em seu funcionamento, e nem mesmo entender os seus fundamentos. Me pareceu um experimento interessante criado por nerds mais inteligentes que eu, em especial aquele sujeito chamado Satoshi Nakamoto, que ninguem sabia exatamente quem era. Algo que, na época, achei levemente semelhante ao experimento criado na década de 1990 pela companhia de relógios Swiss, chamado Swatch, que pretendia revolucionar o mundo e a Internet criando uma Internet Time sem fusos horários (veja mais aqui), que ninguem nunca conseguiu usar na prática. Ledo engano… Em poucos anos o Bitcoin começou a crescer em valor e usos. Várias exchanges surgiram, inclusive no Brasil. Em 2014, já entendo o valor do $BTC, pela primeira vez pensei em comprar 1 BTC para entender melhor. Custava R$500 1 unidade dessa “coisa” que ninguem entendia bem. Mas era difícil comprar essa moeda. A única empresa que eu conhecia focada nesse mercado era a Mercado Bitcoin, que havia sofrido um ataque sério meses antes perdendo muito dinheiro. Outra alternativa eram as compras P2P (pessoa a pessoa, em tradução livre), com a qual não me senti seguro. E na época, R$500 era muito dinheiro para minha família, e não era algo com o qual se brinca, ainda mais em meio aos vários empreendimentos com o qual eu lidava. Mais uma vez a oportunidade passou pela janela. A primeira vez que comprei Bitcoin foi em 2016/2017, depois de vender uma startup para os gringos e voltar focar no amo (TI e programação). Na época as exchanges brasileiras já estavam consolidadas, mostrando que o Brasil estava na onda dessa revolução. Muitos pontos de venda passaram a aceitar pagamento com bitcoin nessa época. A coisa tava quente, e, com o incentivo do meu amigo Ton, fiz meus primeiros investimentos. 1 $BTC valia pouco mais de R$10.000,00. Ao longo de 2017 fui aos poucos comprando. Em janeiro de 2018, 1 $BTC já valia mais de R$60.000,00. Acredito que esse tenha sido o último valor em que eu comprei bitcoin. 2018 ensinou o quanto esse mercado é volátil. BTC fechou 2018 com 70% de queda! Altcoins Smart contracts … Conto essa história, primeiro porque gosto de contar histórias, mas também para mostrar que as criptomoedas vieram para ficar, estão crescendo em volume e valor, e junto com a tecnologia da blockchain, estão revolucionando o mundo (no presente!). ","date":"2022-04-28","objectID":"/crypto/br/crypto-and-me/:1:0","tags":null,"title":"Cripto e eu: os desafios de alguém que não acredita em milagres","uri":"/crypto/br/crypto-and-me/"},{"categories":["crypto"],"content":"Cripto em bom Português: Blockchain ","date":"2022-04-27","objectID":"/crypto/br/definitions/blockchains/:1:0","tags":null,"title":"Cripto em bom Português: Blockchain","uri":"/crypto/br/definitions/blockchains/"},{"categories":["crypto"],"content":"Cripto em bom Português: Definições importantes Criptomoeda Criptografia BTC Ethereum ETH2.0 Wallet Blockchain PoW Testnet Exchange DEX CEX Smart Contract NFT Web3 Token Bridge DAO ","date":"2022-02-08","objectID":"/crypto/br/definitions/:1:0","tags":null,"title":"Cripto em bom Português: Definições importantes","uri":"/crypto/br/definitions/"},{"categories":["tech"],"content":"Polyglot, me? — Bruno E. Grossi I’m studying English again but serious now. Although I studied English when was young and have already worked with teams abroad, my current job as a Software Architect at Ci\u0026T is the first one where I really need English. And the company is actually helping me intending to be fluent in English. But I need to confess: it’s a painful process for me, as I don’t like English. I prefer to learn Italian, the beautiful language of my ancestors (si, ho già studiato italiano). But English is necessary and useful in all aspects. So, let’s practice it. Writing, speaking, and thinking in English is part of my job and responsibilities, and I’m committed to it. And writing is a good exercise. Meantime, I remembered that I’m already fluent in a lot of languages: programming languages. Some years ago, Barack Obama made a speech asking Americans to learn computer programming (and became the first American president to write a computer program). More recently, Apple’s Tim Cook said that coding is better than learning English. So, I decided to list and review my story with the programming languages. I learned to program when I was 8. Nowadays, we have a lot of programming schools focused on children, but I was an 8-year-old boy in 1980s’ Brazil. We didn’t use to have Personal Computers in stores before the 1990s here. But anyway, my parents always believed computers would be the future, and borrowed a TK-8000 computer that only executes MS Basic codes. And then, my brothers and I wrote our first lines of code that, I suppose, were like these: 10INPUT\"What is your name?\",NAME$20INPUT\"Input a number \",A30FORI=1TOA40PRINT\"Hello \";NAME$50NEXTI In Basic, all lines start with a number that is used to indicate the order to execute. If you want to edit a line, you only send a new line with the same number, and it will be replaced (you can try this code online here). TK-8000 didn’t have a storage option. I did a lot of code and small, simple games on it — and copy all lines to a paper to rewrite after I started again. When my parents finally bought our first Personal Computer, a PC XT from a national manufacturer, it cames with Quick Basic, a new version of MS Basic, and floppy disks to save the code. With new options (wow, there was an operational system!), I understood that Basic was not the only existing programming language, and what a compiler is. So I discovered Assembly language that was used only by professionals at that time. I didn’t write so much code on it but understand their codes and hack some of them (like change Assembly codes to change Game behaviors). An example of Assembly code is (try it online here): section .text global _start ;must be declared for using gcc _start: ;tell linker entry point mov edx, len ;message length mov ecx, msg ;message to write mov ebx, 1 ;file descriptor (stdout) mov eax, 4 ;system call number (sys_write) int 0x80 ;call kernel mov eax, 1 ;system call number (sys_exit) int 0x80 ;call kernel section .data msg db 'Hello, world!',0xa ;our dear string len equ $ - msg ;length of our dear string And then, we got Windows 3.1, the last version before the so popular Windows 95. With graphical options, we’ve got Visual Basic 1.0. It’s a new paradigm for the same Basic language, now with a graphical user interface (GUI). With Visual Basic, I made my first money with programming. It was a simple phone book written for a friend for a small charge (thank you, my friend, for encouraging me). With the modem and Boletim Board Systems (BBS) era, nearly 1993, I learned about scripts and C language. My first contact with Linux and shell scripts was at that time too. In Brazil, the rise of the internet, nearly 1994, brought us mIRC scripts, and HTML (which is not exactly a programming language). And then, CGIs on the server-side, using the Perl language, that I used for a long time. PHP was a natural evolution, and I wrote a lot of modularized code for some professional projects. At that point, I ha","date":"2020-08-31","objectID":"/tech/polyglot-me/:1:0","tags":null,"title":"Poliglot, Me?","uri":"/tech/polyglot-me/"},{"categories":["tech"],"content":"I like Linux. And I used it for many years. But now, I need to use some software that does not support Linux. So, I’m using Windows 10 here. And it is a Windows 10 Home Edition. Docker does not support it on its official release. So, you need to get the legacy Docker Toolbox. ","date":"2019-05-03","objectID":"/tech/using-docker-on-windows-10-home-edition/:0:0","tags":null,"title":"Using Docker on Windows 10 Home Edition","uri":"/tech/using-docker-on-windows-10-home-edition/"},{"categories":["tech"],"content":"But, why the native version does not work? A Docker container should be isolated from all other machine resources not granted by the user. For this, it uses Linux’s namespace and control groups. From this article: Linux namespaces are provided and supported by Linux kernel to allow separation (virtualization) of process ID space (PID numbers), network interfaces, interprocess communication (IPC), mount points and kernel information. Control groups in Linux allow accurate resource control: using control groups allows Docker to limit CPU or memory usage for each container.* To run Docker “natively” on Windows, they don’t have namespaces and control groups. So, developers use Hyper-V virtual hosts to create this isolation. However, Windows 10 Home does not support Hyper-V functions. Hyper-V specifically provides hardware virtualization and process isolation. That’s why we need the legacy Docker toolbox. Docker Toolbox is a solution that uses Oracle’s VirtualBox Headless mode to run Docker on a Linux virtual container. ","date":"2019-05-03","objectID":"/tech/using-docker-on-windows-10-home-edition/:1:0","tags":null,"title":"Using Docker on Windows 10 Home Edition","uri":"/tech/using-docker-on-windows-10-home-edition/"},{"categories":["tech"],"content":"Explaining the trick The trick here is that Docker is separated into two parts. A docker client and an engine daemon. So, Toolbox uses a tool, called docker-machine to create a Linux virtual machine and run a Docker Engine inside it. It’s not a native solution but works very well. The Docker client may be used to control not only a local docker but a remote one too. So, we only need this windows client (included on toolbox) and point it to our virtual server. This can be done settings some environment variables, and the command docker-machine.exe env teaches you how to do this. I will talk about docker-machine utility in another post. But, to be more productive, Toolbox comes with a utility shell script that checks it docker’s VM machine is running and starts it if not. It’s used through the Docker Quickstart Terminal link created on Windows’ Start Menu. This link simply call a git’s bash.exe (or some other Linux terminal ported to windows) and execute a start.sh (you can see it here). Do you know best practices and more information about running Docker on Windows Home edition? Share it on comments! Also published at medium.com on May 3, 2019. ","date":"2019-05-03","objectID":"/tech/using-docker-on-windows-10-home-edition/:2:0","tags":null,"title":"Using Docker on Windows 10 Home Edition","uri":"/tech/using-docker-on-windows-10-home-edition/"}]